import tensorflow as tf
from tensorflow.keras import layers, models

def identity_block(input_tensor, kernel_size, filters, stage, block):
    filters1, filters2, filters3 = filters
    conv_name_base = 'res' + str(stage) + block + '_branch'
    bn_name_base = 'bn' + str(stage) + block + '_branch'

    x = layers.Conv2D(filters1, (1, 1), name=conv_name_base + '2a', use_bias=False)(input_tensor)
    x = layers.BatchNormalization(name=bn_name_base + '2a')(x)
    x = layers.ReLU()(x)

    x = layers.Conv2D(filters2, kernel_size, padding='same', name=conv_name_base + '2b', use_bias=False)(x)
    x = layers.BatchNormalization(name=bn_name_base + '2b')(x)
    x = layers.ReLU()(x)

    x = layers.Conv2D(filters3, (1, 1), name=conv_name_base + '2c', use_bias=False)(x)
    x = layers.BatchNormalization(name=bn_name_base + '2c')(x)

    x = layers.add([x, input_tensor])
    x = layers.ReLU()(x)
    return x

def conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):
    filters1, filters2, filters3 = filters
    conv_name_base = 'res' + str(stage) + block + '_branch'
    bn_name_base = 'bn' + str(stage) + block + '_branch'

    x = layers.Conv2D(filters1, (1, 1), strides=strides, name=conv_name_base + '2a', use_bias=False)(input_tensor)
    x = layers.BatchNormalization(name=bn_name_base + '2a')(x)
    x = layers.ReLU()(x)

    x = layers.Conv2D(filters2, kernel_size, padding='same', name=conv_name_base + '2b', use_bias=False)(x)
    x = layers.BatchNormalization(name=bn_name_base + '2b')(x)
    x = layers.ReLU()(x)

    x = layers.Conv2D(filters3, (1, 1), name=conv_name_base + '2c', use_bias=False)(x)
    x = layers.BatchNormalization(name=bn_name_base + '2c')(x)

    shortcut = layers.Conv2D(filters3, (1, 1), strides=strides, name=conv_name_base + '1', use_bias=False)(input_tensor)
    shortcut = layers.BatchNormalization(name=bn_name_base + '1')(shortcut)

    x = layers.add([x, shortcut])
    x = layers.ReLU()(x)
    return x

def build_resnet(blocks, input_shape=(224, 224, 3), num_classes=1000):
    img_input = layers.Input(shape=input_shape)
    x = layers.ZeroPadding2D(padding=(3, 3), name='conv1_pad')(img_input)
    x = layers.Conv2D(64, (7, 7), strides=(2, 2), name='conv1', use_bias=False)(x)
    x = layers.BatchNormalization(name='bn_conv1')(x)
    x = layers.ReLU()(x)
    x = layers.ZeroPadding2D(padding=(1, 1), name='pool1_pad')(x)
    x = layers.MaxPooling2D((3, 3), strides=(2, 2))(x)

    x = conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))
    for i in range(1, blocks[0]):
        x = identity_block(x, 3, [64, 64, 256], stage=2, block=chr(97 + i))

    x = conv_block(x, 3, [128, 128, 512], stage=3, block='a')
    for i in range(1, blocks[1]):
        x = identity_block(x, 3, [128, 128, 512], stage=3, block=chr(97 + i))

    x = conv_block(x, 3, [256, 256, 1024], stage=4, block='a')
    for i in range(1, blocks[2]):
        x = identity_block(x, 3, [256, 256, 1024], stage=4, block=chr(97 + i))

    x = conv_block(x, 3, [512, 512, 2048], stage=5, block='a')
    for i in range(1, blocks[3]):
        x = identity_block(x, 3, [512, 512, 2048], stage=5, block=chr(97 + i))

    x = layers.GlobalAveragePooling2D(name='avg_pool')(x)
    x = layers.Dense(num_classes, activation='softmax', name='fc1000')(x)

    model = models.Model(img_input, x, name='resnet')
    return model

def ResNet50_tf():
    return build_resnet([3, 4, 6, 3])

def ResNet101_tf():
    return build_resnet([3, 4, 23, 3])

def ResNet152_tf():
    return build_resnet([3, 8, 36, 3])

# Create a TensorFlow ResNet-50 model
model_50 = ResNet50_tf()
n_parameters_50 = model_50.count_params()
print(f"ResNet-50 Number of Params: {n_parameters_50 / 1000000:.1f}M")

# Create a TensorFlow ResNet-101 model
model_101 = ResNet101_tf()
n_parameters_101 = model_101.count_params()
print(f"ResNet-101 Number of Params: {n_parameters_101 / 1000000:.1f}M")

# Create a TensorFlow ResNet-152 model
model_152 = ResNet152_tf()
n_parameters_152 = model_152.count_params()
print(f"ResNet-152 Number of Params: {n_parameters_152 / 1000000:.1f}M")
